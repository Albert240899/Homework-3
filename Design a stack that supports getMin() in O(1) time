class Node
    def __init__(self, value)
        self.value = value
        self.next = None

    def __str__(self)
        return Node({}).format(self.value)

    __repr__ = __str__


class Stack

    def __init__(self)
        self.top = None
        self.count = 0
        self.minimum = None

    def __str__(self)
        temp = self.top
        out = []
        while temp
            out.append(str(temp.value))
            temp = temp.next
        out = 'n'.join(out)
        return ('Top {} nnStack n{}'.format(self.top, out))

    __repr__ = __str__

    def getMin(self)
        if self.top is None
            return Stack is empty
        else
            print(Minimum Element in the stack is {}.format(self.minimum))

    def isEmpty(self)
        if self.top == None
            return True
        else
            return False

    def __len__(self)
        self.count = 0
        tempNode = self.top
        while tempNode
            tempNode = tempNode.next
            self.count += 1
        return self.count

    def peek(self)
        if self.top is None
            print(Stack is empty)
        else
            if self.top.value  self.minimum
                print(Top Most Element is {}.format(self.minimum))
            else
                print(Top Most Element is {}.format(self.top.value))

    def push(self, value)
        if self.top is None
            self.top = Node(value)
            self.minimum = value
